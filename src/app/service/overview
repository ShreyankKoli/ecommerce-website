import { Component, OnInit, ViewChild } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';

@Component({
  selector: 'app-products',
  templateUrl: './products.component.html',
  styleUrls: ['./products.component.css']
})
export class ProductsComponent implements OnInit {
  displayedColumns: string[] = ['title', 'image', 'description', 'stock', 'actions'];
  dataSource = new MatTableDataSource<any>();
  newProduct = { title: '', image: '', description: '', stock: 0 };
  searchKey = '';

  @ViewChild(MatPaginator) paginator!: MatPaginator;
  @ViewChild(MatSort) sort!: MatSort;

  constructor(private http: HttpClient) {}

  ngOnInit(): void {
    this.loadProducts();
  }

  loadProducts(): void {
    const storedProducts = localStorage.getItem('products');
    if (storedProducts) {
      const parsed = JSON.parse(storedProducts);
      this.dataSource.data = parsed;
    } else {
      this.http.get<any>('https://dummyjson.com/products').subscribe(response => {
        const products = response.products.map((p: any) => ({
          title: p.title,
          image: p.thumbnail,
          description: p.description,
          stock: p.stock
        }));
        this.dataSource.data = products;
        localStorage.setItem('products', JSON.stringify(products));
      });
    }
    setTimeout(() => {
      this.dataSource.paginator = this.paginator;
      this.dataSource.sort = this.sort;
    });
  }

  addProduct(): void {
    if (this.newProduct.title && this.newProduct.image && this.newProduct.description) {
      const updatedProducts = [...this.dataSource.data, { ...this.newProduct }];
      this.dataSource.data = updatedProducts;
      localStorage.setItem('products', JSON.stringify(updatedProducts));
      this.newProduct = { title: '', image: '', description: '', stock: 0 };
    }
  }

  deleteProduct(index: number): void {
    const products = this.dataSource.data;
    products.splice(index, 1);
    this.dataSource.data = [...products];
    localStorage.setItem('products', JSON.stringify(products));
  }

  updateProduct(index: number, updated: any): void {
    const products = [...this.dataSource.data];
    products[index] = updated;
    this.dataSource.data = products;
    localStorage.setItem('products', JSON.stringify(products));
  }

  applyFilter(): void {
    this.dataSource.filter = this.searchKey.trim().toLowerCase();
  }

  clearFilter(): void {
    this.searchKey = '';
    this.applyFilter();
  }
}

<div class="container mat-typography">
  <h2>Product Manager</h2>

  <!-- Add Product Form -->
  <mat-card>
    <mat-card-title>Add New Product</mat-card-title>
    <mat-card-content>
      <form>
        <mat-form-field appearance="outline" class="full-width">
          <mat-label>Title</mat-label>
          <input matInput [(ngModel)]="newProduct.title" name="title">
        </mat-form-field>

        <mat-form-field appearance="outline" class="full-width">
          <mat-label>Image URL</mat-label>
          <input matInput [(ngModel)]="newProduct.image" name="image">
        </mat-form-field>

        <mat-form-field appearance="outline" class="full-width">
          <mat-label>Description</mat-label>
          <textarea matInput [(ngModel)]="newProduct.description" name="description"></textarea>
        </mat-form-field>

        <mat-form-field appearance="outline" class="full-width">
          <mat-label>Stock</mat-label>
          <input matInput type="number" [(ngModel)]="newProduct.stock" name="stock">
        </mat-form-field>

        <button mat-raised-button color="primary" (click)="addProduct()">Add Product</button>
      </form>
    </mat-card-content>
  </mat-card>

  <!-- Search Field -->
  <mat-form-field appearance="outline" class="full-width">
    <mat-label>Search</mat-label>
    <input matInput [(ngModel)]="searchKey" (keyup)="applyFilter()" placeholder="Search by title">
    <button mat-icon-button matSuffix *ngIf="searchKey" (click)="clearFilter()">
      <mat-icon>close</mat-icon>
    </button>
  </mat-form-field>

  <!-- Product Table -->
  <div class="mat-elevation-z8">
    <table mat-table [dataSource]="dataSource" matSort class="full-width">

      <!-- Title Column -->
      <ng-container matColumnDef="title">
        <th mat-header-cell *matHeaderCellDef mat-sort-header>Title</th>
        <td mat-cell *matCellDef="let product">{{ product.title }}</td>
      </ng-container>

      <!-- Image Column -->
      <ng-container matColumnDef="image">
        <th mat-header-cell *matHeaderCellDef>Image</th>
        <td mat-cell *matCellDef="let product">
          <img [src]="product.image" width="50" height="50" alt="product image">
        </td>
      </ng-container>

      <!-- Description Column -->
      <ng-container matColumnDef="description">
        <th mat-header-cell *matHeaderCellDef>Description</th>
        <td mat-cell *matCellDef="let product">{{ product.description }}</td>
      </ng-container>

      <!-- Stock Column -->
      <ng-container matColumnDef="stock">
        <th mat-header-cell *matHeaderCellDef mat-sort-header>Stock</th>
        <td mat-cell *matCellDef="let product">{{ product.stock }}</td>
      </ng-container>

      <!-- Actions Column -->
      <ng-container matColumnDef="actions">
        <th mat-header-cell *matHeaderCellDef>Actions</th>
        <td mat-cell *matCellDef="let product; let i = index">
          <button mat-icon-button color="warn" (click)="deleteProduct(i)">
            <mat-icon>delete</mat-icon>
          </button>
          <button mat-icon-button (click)="updateProduct(i, product)">
            <mat-icon>edit</mat-icon>
          </button>
        </td>
      </ng-container>

      <!-- Table Header and Rows -->
      <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
      <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
    </table>

    <!-- Pagination -->
    <mat-paginator [pageSizeOptions]="[5, 10, 20]" showFirstLastButtons></mat-paginator>
  </div>
</div>


